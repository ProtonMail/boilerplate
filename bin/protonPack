#!/usr/bin/env node

const fs = require('fs').promises;
const chalk = require('chalk');
const dedent = require('dedent');
const argv = require('minimist')(process.argv.slice(2));
const localIp = require('my-local-ip');

const configBuilder = require('../cli/config');
const configAppBuilder = require('../cli/configApp');
const { getPort, getPublicPath, findPort } = require('../webpack/helpers/source');

const is = (command) => argv._.includes(command);

const {
    config: appConfig,
    path: appConfigPath,
    apiUrl
} = configAppBuilder(argv);

async function main() {

    // For any task BUT init we need to create a custom config for the app
    if (!is('init') && !is('help')) {
        await fs.writeFile(appConfigPath, appConfig);
    }

    if (is('compile')) {
        const compile = require('../cli/compile');
        const publicPath = getPublicPath(argv);
        const CONFIG = configBuilder({ publicPath });
        compile(CONFIG);
        return;
    }

    // Run the dev server, but first find an available port
    if (is('dev-server')) {
        const server = require('../cli/server');
        const port = await findPort(getPort(argv));
        const publicPath = getPublicPath(argv);

        const log = (ip = 'localhost') => chalk.yellow(`http://${ip}:${port}${publicPath}`);
        console.log(dedent`
            ➙ Dev server: ${log()}
            ➙ Dev server: ${log(localIp())}
            ➙ API: ${chalk.yellow(apiUrl)}
            \n
        `);
        const CONFIG = configBuilder({ port, publicPath });

        const run = server(CONFIG);
        run.listen(port);
    }

    // Init the application with the boilerplate
    if (is('init')) {
        const initProtonApp = require('../cli/initProtonApp');
        initProtonApp(argv._[1]);
    }

    if (is('help')) {
        console.log(dedent`
        Usage: $ proton-pack <command>
        Available commands:
          - ${chalk.blue('init')} ${chalk.blue('<type>')}
              Create a basic app with OpenPGP.
                - type: default (default) basic app
                - type: auth basic app with login + private routes

          - ${chalk.blue('dev-server')}
              Dev server, default port on ${chalk.bold('8080')}
                - --api=<String>: Change the API, based on your env.json
                - --port=<Number>: to use a custom port
                - --publicPath=/settings/: to serve the app on /settings/

          - ${chalk.blue('compile')}
                - --api=<String>: Change the API, based on your env.json
                - --publicPath=/settings/: to build the app based on /settings/
              Build the app
        `);
    }
}

main();
