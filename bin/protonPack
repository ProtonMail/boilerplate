#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');
const dedent = require('dedent');
const argv = require('minimist')(process.argv.slice(2), {
    string: ['appMode', 'featureFlags'],
    boolean: ['sri'],
    default: {
        sri: true
    }
});
const localIp = require('my-local-ip');

const configBuilder = require('../cli/config');
const configAppBuilder = require('../cli/configApp');
const { json, debug, success, error } = require('../cli/helpers/log');
const { hasDirectory } = require('../cli/helpers/file');
const { getPort, getPublicPath, findPort } = require('../webpack/helpers/source');

const is = (command) => argv._.includes(command);

const getSingleArgument = (argument) => {
    // Many flags creates an array, take the last one.
    if (Array.isArray(argument)) {
        const { length, [length - 1]: last, first } = argument;
        return last || first;
    }
    return argument;
};

const getFeatureFlags = () => {
    return getSingleArgument(argv.featureFlags) || '';
};

const getAppMode = () => {
    return getSingleArgument(argv.appMode) || 'bundle';
};


async function main() {

    const {
        config: appConfig,
        path: appConfigPath,
        apiUrl,
        json: jsonConfig
    } = configAppBuilder(argv);

    const APP_MODE = getAppMode();
    const FEATURE_FLAGS = getFeatureFlags();
    const WRITE_SRI = argv.sri;

    // For any task BUT init we need to create a custom config for the app
    if (!is('init') && !is('help') && !is('print-config')) {
        debug(appConfig, 'app config');
        await fs.writeFile(appConfigPath, appConfig);
        success(`generated ${appConfigPath}`);
        await hasDirectory(path.join('node_modules', 'proton-translations'), true);
    }

    if (is('print-config')) {
        return json(jsonConfig);
    }

    if (is('compile') || is('extract-i18n')) {
        const compile = require('../cli/compile');
        const publicPath = getPublicPath(argv);
        const CONFIG = configBuilder({
            publicPath,
            appMode: APP_MODE,
            featureFlags: FEATURE_FLAGS,
            writeSRI: WRITE_SRI,
            ...is('extract-i18n') && { flow: 'i18n' }
        });
        return compile(CONFIG);
    }

    // Run the dev server, but first find an available port
    if (is('dev-server')) {
        const server = require('../cli/server');
        const port = await findPort(getPort(argv));
        const publicPath = getPublicPath(argv);

        const log = (ip = 'localhost') => chalk.yellow(`http://${ip}:${port}${publicPath}`);
        console.log(dedent`
            ➙ Dev server: ${log()}
            ➙ Dev server: ${log(localIp())}
            ➙ API: ${chalk.yellow(apiUrl)}
            \n
        `);
        const CONFIG = configBuilder({ port, publicPath, appMode: APP_MODE, featureFlags: FEATURE_FLAGS });

        const run = server(CONFIG);
        run.listen(port);
    }

    // Init the application with the boilerplate
    if (is('init')) {
        const initProtonApp = require('../cli/initProtonApp');
        initProtonApp(argv._[1]);
    }

    if (is('help')) {
        console.log(dedent`
        Usage: $ proton-pack <command>
        Available commands:
          - ${chalk.blue('init')} ${chalk.blue('<type>')}
              Create a basic app with OpenPGP.
                - type: default (default) basic app
                - type: auth basic app with login + private routes

          - ${chalk.blue('dev-server')}
              Dev server, default port on ${chalk.bold('8080')}
                - --api=<String>: Change the API, based on your env.json
                - --port=<Number>: to use a custom port
                - --publicPath=/settings/: to serve the app on /settings/

          - ${chalk.blue('compile')}
                - --api=<String>: Change the API, based on your env.json
                        <MainAPI>+<ExtendedAPI>: Use MainAPI as a base for the env but use ExtendedAPI as the URL -> dev+proxy
                - --publicPath=/settings/: to build the app based on /settings/
              Build the app

          - ${chalk.blue('extract-i18n')}
              Extract translations from a project (we use ttag)

          - ${chalk.blue('print-config')}
              Print as JSON the current config
        `);
    }
}

main().catch(error);
